generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
   id                 String       @id @default(uuid())
   username           String       @unique
   email              String       @unique
   password           String
   firstName          String
   lastName           String
   phoneNumber        String
   secondPhoneNumber  String?
   categoryPreference String?
   referralSource     String?
   role               Role         @default(STUDENT)
   isActive           Boolean      @default(true)
   lastLoginAt        DateTime?    @updatedAt
   createdAt          DateTime     @default(now())
   updatedAt          DateTime     @updatedAt
   taughtCourses      Course[]     @relation("CourseProfessor")
   enrollments        Enrollment[]
   payments           Payment[]
   progressMilestones ProgressMilestone[]
   certificates       Certificate[]
   studentProfile     StudentProfile?
 }

model Category {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  courses     Course[]
}

model Course {
   id             String           @id @default(uuid())
   title          String
   slug           String           @unique
   description    String
   price          Float            @default(0.0)
   language       String
   visibility     CourseVisibility @default(DRAFT)
   categoryId     String?
   professorId    String
   createdAt      DateTime         @default(now())
   updatedAt      DateTime         @updatedAt
   publishedAt    DateTime?
   rating         Float            @default(0.0)
   ratingCount    Int              @default(0)
   enrollmentCount Int             @default(0)
   totalDuration   Int?            // Total duration in minutes
   category       Category?        @relation(fields: [categoryId], references: [id])
   professor      User             @relation("CourseProfessor", fields: [professorId], references: [id])
   enrollments    Enrollment[]
   lessons        Lesson[]
   payments       Payment[]
   certificates   Certificate[]
   progressMilestones ProgressMilestone[]

   @@index([professorId, visibility])
   @@index([categoryId, visibility])
 }

model Lesson {
    id                    String           @id @default(uuid())
    courseId              String
    title                 String
    order                 Int
    content               String
    isVisible             Boolean          @default(true)
    isDeleted             Boolean          @default(false)
    createdAt             DateTime         @default(now())
    updatedAt             DateTime         @updatedAt
    deletedAt             DateTime?
    attachments           Attachment[]
    course                Course           @relation(fields: [courseId], references: [id])
    lessonProgress        LessonProgress[]
    duration              Int?             // Duration in minutes
    youtubeUrl            String?          // YouTube video URL for free courses
  }

model Attachment {
   id           String   @id @default(uuid())
   lessonId     String
   name         String
   fileName     String
   mimeType     String
   fileSize     Int
   bunnyCdnPath String
   bunnyCdnUrl  String
   createdAt    DateTime @default(now())
   updatedAt    DateTime @updatedAt
   lesson       Lesson   @relation(fields: [lessonId], references: [id])
 }

model LessonProgress {
   id                     String     @id @default(uuid())
   enrollmentId           String
   lessonId               String
   isCompleted            Boolean    @default(false)
   videoWatchedPercentage Int        @default(0)
   completedAt            DateTime?
   createdAt              DateTime   @default(now())
   updatedAt              DateTime   @updatedAt
   enrollment             Enrollment @relation(fields: [enrollmentId], references: [id])
   lesson                 Lesson     @relation(fields: [lessonId], references: [id])

   @@unique([enrollmentId, lessonId])
   @@index([lessonId, isCompleted])
 }



model Coupon {
  id             String     @id @default(uuid())
  code           String     @unique
  type           CouponType
  amount         Float
  maxUses        Int?
  usedCount      Int        @default(0)
  maxUsesPerUser Int        @default(1)
  startDate      DateTime
  endDate        DateTime?
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  payments       Payment[]
}

model Payment {
    id                    String        @id @default(cuid())
    amount                Decimal
    currency              String        @default("EGP")
    status                PaymentStatus @default(PENDING)
    paymentMethod         String?

    // PayMob specific fields
    paymobOrderId         String?       @unique
    paymobTransactionId   BigInt?       // PayMob transaction ID from webhook
    paymobResponse        Json?         // Store full PayMob response

    // Payment completion tracking
    completedAt           DateTime?     // When payment was completed
    failureReason         String?       // Reason for payment failure

    userId                String
    user                  User          @relation(fields: [userId], references: [id])

    courseId              String
    course                Course        @relation(fields: [courseId], references: [id])

    enrollmentId          String?
    enrollment            Enrollment?   @relation(fields: [enrollmentId], references: [id])

    couponId              String?
    coupon                Coupon?       @relation(fields: [couponId], references: [id])

    // Relations
    webhooks              PaymentWebhook[]

    createdAt             DateTime      @default(now())
    updatedAt             DateTime      @updatedAt

    @@index([userId])
    @@index([courseId])
    @@index([status])
    @@index([paymobOrderId])
    @@index([paymobTransactionId])
  }

model PaymentWebhook {
    id                    String    @id @default(cuid())
    paymentId             String
    paymobTransactionId   BigInt
    webhookPayload        Json      // Full webhook payload from PayMob
    processedAt           DateTime? // When webhook was successfully processed
    processingAttempts    Int       @default(0)
    lastError             String?   // Last error message if processing failed

    payment               Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)

    createdAt             DateTime  @default(now())
    updatedAt             DateTime  @updatedAt

    @@index([paymentId])
    @@index([paymobTransactionId])
    @@index([processedAt])
}

model StudentProfile {
   id                 String   @id @default(uuid())
   userId             String   @unique
   bio                String?
   avatar             String?
   preferredLanguage  String?
   timezone           String?
   notifications      Json?    // Notification preferences
   createdAt          DateTime @default(now())
   updatedAt          DateTime @updatedAt
   user               User     @relation(fields: [userId], references: [id])
 }

model Enrollment {
   id                   String           @id @default(uuid())
   userId               String
   courseId             String
   enrolledAt           DateTime         @default(now())
   status               EnrollmentStatus @default(ACTIVE)
   completionPercentage Int              @default(0)
   lastAccessedAt       DateTime?
   completedAt          DateTime?
   course               Course           @relation(fields: [courseId], references: [id])
   user                 User             @relation(fields: [userId], references: [id])
   lessonProgress       LessonProgress[]
   payments             Payment[]

   @@unique([userId, courseId])
   @@index([userId, status])
   @@index([courseId, status])
 }

enum Role {
  ADMIN
  PROFESSOR
  STUDENT
}

enum CourseVisibility {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum EnrollmentStatus {
   PENDING
   ACTIVE
   COMPLETED
   CANCELLED
 }

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentGateway {
  PAYMOB
  OTHER
}

enum CouponType {
   PERCENTAGE
   FIXED
}

// Certificate System Models
enum CertificateStatus {
  ACTIVE
  REVOKED
  EXPIRED
}

enum MilestoneType {
  COURSE_START
  LESSON_COMPLETE
  COURSE_COMPLETE
  QUIZ_PASS
  ASSIGNMENT_SUBMIT
}

model Certificate {
  id              String            @id @default(cuid())
  certificateCode String            @unique
  userId          String
  courseId        String
  status          CertificateStatus @default(ACTIVE)
  issuedAt        DateTime          @default(now())
  validUntil      DateTime?
  isRevoked       Boolean           @default(false)
  revokedAt       DateTime?
  revokedReason   String?

  // Certificate metadata
  studentName     String
  courseName      String
  professorName   String
  completionDate  DateTime
  grade           String?

  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  course          Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@unique([userId, courseId])
  @@index([userId])
  @@index([courseId])
  @@index([certificateCode])
  @@index([status])
}

model ProgressMilestone {
  id            String        @id @default(cuid())
  userId        String
  courseId      String
  milestoneType MilestoneType
  metadata      Json?         // Additional milestone-specific data
  achievedAt    DateTime      @default(now())

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course        Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@unique([userId, courseId, milestoneType])
  @@index([userId])
  @@index([courseId])
  @@index([milestoneType])
}
